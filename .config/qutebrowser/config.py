# Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Change the argument to True to still load settings configured via autoconfig.yml
config.load_autoconfig(False)


# Keymaps
config.bind('[b', 'tab-prev')
config.bind(']b', 'tab-next')
config.bind('<Space>c', 'tab-close')


c.input.insert_mode.auto_load = True


# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'chrome-devtools://*')

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'devtools://*')

# Value to send in the `Accept-Language` header. Note that the value
# read from JavaScript is always the global value.
# Type: String
config.set('content.headers.accept_language', '', 'https://matchmaker.krunker.io/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:90.0) Gecko/20100101 Firefox/90.0', 'https://accounts.google.com/*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'chrome-devtools://*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'devtools://*')

# Allow JavaScript to read from or write to the clipboard. With
# QtWebEngine, writing the clipboard as response to a user interaction
# is always allowed.
# Type: String
# Valid values:
#   - none: Disable access to clipboard.
#   - access: Allow reading from and writing to the clipboard.
#   - access-paste: Allow accessing the clipboard and pasting clipboard content.
c.content.javascript.clipboard = 'access-paste'

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome-devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Allow locally loaded documents to access remote URLs.
# Type: Bool
config.set('content.local_content_can_access_remote_urls', True, 'file:///home/igortxra/.local/share/qutebrowser/userscripts/*')

# Allow locally loaded documents to access other local URLs.
# Type: Bool
config.set('content.local_content_can_access_file_urls', False, 'file:///home/igortxra/.local/share/qutebrowser/userscripts/*')


# How to behave when the last tab is closed. If the
# `tabs.tabs_are_windows` setting is set, this is ignored and the
# behavior is always identical to the `close` value.
# Type: String
# Valid values:
#   - ignore: Don't do anything.
#   - blank: Load a blank page.
#   - startpage: Load the start page.
#   - default-page: Load the default page.
#   - close: Close the window.
c.tabs.last_close = 'ignore'

# Page(s) to open at the start.
# Type: List of FuzzyUrl, or FuzzyUrl
c.url.start_pages = 'https://github.com/dashboard'

c.url.searchengines = {
    'DEFAULT': 'https://start.duckduckgo.com/?q={}',
    'aw': 'https://wiki.archlinux.org/?search={}', 
    'goog': 'https://www.google.com/search?q={}',
    're': 'https://www.reddit.com/search?q={}', 
    'gh': 'https://github.com/search?q={}', 
    'ghr': 'https://github.com/{unquoted}',
    'wiki': 'https://en.wikipedia.org/wiki/{}',
    'yt': 'https://www.youtube.com/results?search_query={}',
    'qtile': 'http://docs.qtile.org/en/stable/search.html?q={}',
    'firestore': "https://console.cloud.google.com/firestore/databases/-default-/data/panel/demand-collection-v2/{}?project=scan-275215",
    'secret': 'https://console.cloud.google.com/security/secret-manager/secret/{}/versions?project=scan-275215'
}

c.editor.command = ["kitty", "-e", "nvim", "{file}"]

# credits to theova/base16-qutebrowser for the original template

##########
# COLORS #
##########

# base16 colors but with variable names that 
# reflect what the color is mainly used for

bg_default = "#282c34"          # main shade darkest
bg_lighter = "#353b45"
bg_selection = "#3e4451"
# "#545862"
fg_disabled = "#565c64"
fg_default = "#abb2bf"
# "#b6bdca"
bg_lightest = "#c8ccd4"         # main shade lightest
fg_error = "#e06c75"            # red
# "#d19a66"                     # orange
bg_hint = "#e5c07b"             # yellow
fg_matched_text = "#98c379"     # green
bg_passthrough_mode = "#56b6c2" # teal
bg_insert_mode = "#61afef"      # blue
bg_warning = "#c678dd"          # purple
# "#be5046"                     # dark red

############
# SETTINGS #
############

# Text color of the completion widget. May be a single color to use for
# all columns or a list of three colors, one for each column.
c.colors.completion.fg = fg_default

# Background color of the completion widget for odd rows.
c.colors.completion.odd.bg = bg_lighter

# Background color of the completion widget for even rows.
c.colors.completion.even.bg = bg_default

# Foreground color of completion widget category headers.
c.colors.completion.category.fg = bg_hint

# Background color of the completion widget category headers.
c.colors.completion.category.bg = bg_default

# Top border color of the completion widget category headers.
c.colors.completion.category.border.top = bg_default

# Bottom border color of the completion widget category headers.
c.colors.completion.category.border.bottom = bg_default

# Foreground color of the selected completion item.
c.colors.completion.item.selected.fg = fg_default

# Background color of the selected completion item.
c.colors.completion.item.selected.bg = bg_selection

# Top border color of the selected completion item.
c.colors.completion.item.selected.border.top = bg_selection

# Bottom border color of the selected completion item.
c.colors.completion.item.selected.border.bottom = bg_selection

# Foreground color of the matched text in the selected completion item.
c.colors.completion.item.selected.match.fg = fg_matched_text

# Foreground color of the matched text in the completion.
c.colors.completion.match.fg = fg_matched_text

# Color of the scrollbar handle in the completion view.
c.colors.completion.scrollbar.fg = fg_default

# Color of the scrollbar in the completion view.
c.colors.completion.scrollbar.bg = bg_default

# Background color of disabled items in the context menu.
c.colors.contextmenu.disabled.bg = bg_lighter

# Foreground color of disabled items in the context menu.
c.colors.contextmenu.disabled.fg = fg_disabled

# Background color of the context menu. If set to null, the Qt default is used.
c.colors.contextmenu.menu.bg = bg_default

# Foreground color of the context menu. If set to null, the Qt default is used.
c.colors.contextmenu.menu.fg =  fg_default

# Background color of the context menu’s selected item. If set to null, the Qt default is used.
c.colors.contextmenu.selected.bg = bg_selection

#Foreground color of the context menu’s selected item. If set to null, the Qt default is used.
c.colors.contextmenu.selected.fg = fg_default

# Background color for the download bar.
c.colors.downloads.bar.bg = bg_default

# Color gradient start for download text.
c.colors.downloads.start.fg = bg_default

# Color gradient start for download backgrounds.
c.colors.downloads.start.bg = bg_insert_mode

# Color gradient end for download text.
c.colors.downloads.stop.fg = bg_default

# Color gradient stop for download backgrounds.
c.colors.downloads.stop.bg = bg_passthrough_mode

# Foreground color for downloads with errors.
c.colors.downloads.error.fg = fg_error

# Font color for hints.
c.colors.hints.fg = bg_default

# Background color for hints. Note that you can use a `rgba(...)` value
# for transparency.
c.colors.hints.bg = bg_hint

# Font color for the matched part of hints.
c.colors.hints.match.fg = fg_default

# Text color for the keyhint widget.
c.colors.keyhint.fg = fg_default

# Highlight color for keys to complete the current keychain.
c.colors.keyhint.suffix.fg = fg_default

# Background color of the keyhint widget.
c.colors.keyhint.bg = bg_default

# Foreground color of an error message.
c.colors.messages.error.fg = bg_default

# Background color of an error message.
c.colors.messages.error.bg = fg_error

# Border color of an error message.
c.colors.messages.error.border = fg_error

# Foreground color of a warning message.
c.colors.messages.warning.fg = bg_default

# Background color of a warning message.
c.colors.messages.warning.bg = bg_warning

# Border color of a warning message.
c.colors.messages.warning.border = bg_warning

# Foreground color of an info message.
c.colors.messages.info.fg = fg_default

# Background color of an info message.
c.colors.messages.info.bg = bg_default

# Border color of an info message.
c.colors.messages.info.border = bg_default

# Foreground color for prompts.
c.colors.prompts.fg = fg_default

# Border used around UI elements in prompts.
c.colors.prompts.border = bg_default

# Background color for prompts.
c.colors.prompts.bg = bg_default

# Background color for the selected item in filename prompts.
c.colors.prompts.selected.bg = bg_selection

# Foreground color for the selected item in filename prompts.
c.colors.prompts.selected.fg = fg_default

# Foreground color of the statusbar.
c.colors.statusbar.normal.fg = fg_matched_text

# Background color of the statusbar.
c.colors.statusbar.normal.bg = bg_default

# Foreground color of the statusbar in insert mode.
c.colors.statusbar.insert.fg = bg_default

# Background color of the statusbar in insert mode.
c.colors.statusbar.insert.bg = bg_insert_mode

# Foreground color of the statusbar in passthrough mode.
c.colors.statusbar.passthrough.fg = bg_default

# Background color of the statusbar in passthrough mode.
c.colors.statusbar.passthrough.bg = bg_passthrough_mode

# Foreground color of the statusbar in private browsing mode.
c.colors.statusbar.private.fg = bg_default

# Background color of the statusbar in private browsing mode.
c.colors.statusbar.private.bg = bg_lighter

# Foreground color of the statusbar in command mode.
c.colors.statusbar.command.fg = fg_default

# Background color of the statusbar in command mode.
c.colors.statusbar.command.bg = bg_default

# Foreground color of the statusbar in private browsing + command mode.
c.colors.statusbar.command.private.fg = fg_default

# Background color of the statusbar in private browsing + command mode.
c.colors.statusbar.command.private.bg = bg_default

# Foreground color of the statusbar in caret mode.
c.colors.statusbar.caret.fg = bg_default

# Background color of the statusbar in caret mode.
c.colors.statusbar.caret.bg = bg_warning

# Foreground color of the statusbar in caret mode with a selection.
c.colors.statusbar.caret.selection.fg = bg_default

# Background color of the statusbar in caret mode with a selection.
c.colors.statusbar.caret.selection.bg = bg_insert_mode

# Background color of the progress bar.
c.colors.statusbar.progress.bg = bg_insert_mode

# Default foreground color of the URL in the statusbar.
c.colors.statusbar.url.fg = fg_default

# Foreground color of the URL in the statusbar on error.
c.colors.statusbar.url.error.fg = fg_error

# Foreground color of the URL in the statusbar for hovered links.
c.colors.statusbar.url.hover.fg = fg_default

# Foreground color of the URL in the statusbar on successful load
# (http).
c.colors.statusbar.url.success.http.fg = bg_passthrough_mode

# Foreground color of the URL in the statusbar on successful load
# (https).
c.colors.statusbar.url.success.https.fg = fg_matched_text

# Foreground color of the URL in the statusbar when there's a warning.
c.colors.statusbar.url.warn.fg = bg_warning

# Background color of the tab bar.
c.colors.tabs.bar.bg = bg_default

# Color gradient start for the tab indicator.
c.colors.tabs.indicator.start = bg_insert_mode

# Color gradient end for the tab indicator.
c.colors.tabs.indicator.stop = bg_passthrough_mode

# Color for the tab indicator on errors.
c.colors.tabs.indicator.error = fg_error

# Foreground color of unselected odd tabs.
c.colors.tabs.odd.fg = fg_default

# Background color of unselected odd tabs.
c.colors.tabs.odd.bg = bg_lighter

# Foreground color of unselected even tabs.
c.colors.tabs.even.fg = fg_default

# Background color of unselected even tabs.
c.colors.tabs.even.bg = bg_default

# Background color of pinned unselected even tabs.
c.colors.tabs.pinned.even.bg = bg_passthrough_mode

# Foreground color of pinned unselected even tabs.
c.colors.tabs.pinned.even.fg = bg_lightest

# Background color of pinned unselected odd tabs.
c.colors.tabs.pinned.odd.bg = fg_matched_text

# Foreground color of pinned unselected odd tabs.
c.colors.tabs.pinned.odd.fg = bg_lightest

# Background color of pinned selected even tabs.
c.colors.tabs.pinned.selected.even.bg = bg_selection

# Foreground color of pinned selected even tabs.
c.colors.tabs.pinned.selected.even.fg = fg_default

# Background color of pinned selected odd tabs.
c.colors.tabs.pinned.selected.odd.bg = bg_selection

# Foreground color of pinned selected odd tabs.
c.colors.tabs.pinned.selected.odd.fg = fg_default

# Foreground color of selected odd tabs.
c.colors.tabs.selected.odd.fg = fg_default

# Background color of selected odd tabs.
c.colors.tabs.selected.odd.bg = bg_selection

# Foreground color of selected even tabs.
c.colors.tabs.selected.even.fg = fg_default

# Background color of selected even tabs.
c.colors.tabs.selected.even.bg = bg_selection

# Background color for webpages if unset (or empty to use the theme's
# color).
# c.colors.webpage.bg = bg_default
